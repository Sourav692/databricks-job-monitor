import os
import sys
import logging
from datetime import datetime

# Add src to path for local development
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from config.settings import DatabricksConfig, MonitoringConfig
from monitors.system_tables_client import SystemTablesClient
from monitors.job_monitor import JobMonitor
from dashboard.job_dashboard import JobMonitoringDashboard

def setup_logging():
    """Setup logging configuration"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('job_monitoring.log'),
            logging.StreamHandler(sys.stdout)
        ]
    )

def main():
    """Main monitoring execution for local development"""
    setup_logging()
    logger = logging.getLogger(__name__)
    
    logger.info("Starting Databricks job monitoring...")
    
    # Load configuration
    try:
        databricks_config = DatabricksConfig.from_environment()
        monitoring_config = MonitoringConfig()
        
        if not databricks_config.host or not databricks_config.token:
            logger.error("Missing required Databricks configuration. Please set DATABRICKS_HOST and DATABRICKS_TOKEN environment variables.")
            return
        
        logger.info(f"Running in {'local' if databricks_config.is_local_environment else 'Databricks'} environment")
        
        # Initialize components
        system_client = SystemTablesClient(databricks_config)
        job_monitor = JobMonitor(system_client, monitoring_config)
        
        # Generate monitoring report
        logger.info("Generating monitoring report...")
        report = job_monitor.generate_monitoring_report(days=7)
        
        # Save report
        report_filename = f"job_monitoring_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        with open(report_filename, 'w') as f:
            f.write(report)
        
        logger.info(f"Monitoring report saved to: {report_filename}")
        print(report)
        
        # Optional: Launch dashboard
        if len(sys.argv) > 1 and sys.argv[1] == "--dashboard":
            logger.info("Launching interactive dashboard...")
            dashboard = JobMonitoringDashboard(job_monitor)
            dashboard.render_streamlit_dashboard()
    
    except Exception as e:
        logger.error(f"Error in monitoring execution: {e}")
        raise

if __name__ == "__main__":
    main()
